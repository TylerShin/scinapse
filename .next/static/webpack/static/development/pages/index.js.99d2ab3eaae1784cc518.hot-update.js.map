{"version":3,"file":"static/webpack/static/development/pages/index.js.99d2ab3eaae1784cc518.hot-update.js","sources":["webpack:///./helpers/withData.tsx","webpack:///./pages/index.tsx"],"sourcesContent":["import { makeExecutableSchema } from 'graphql-tools';\nimport { withData } from 'next-apollo';\nimport typeDefs from '../graphql/typeDefs';\nimport resolvers from '../graphql/resolvers';\nimport { InMemoryCache } from '@apollo/client';\nimport { SchemaLink } from 'apollo-link-schema';\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nconst config = { link: new SchemaLink({ schema }), cache: new InMemoryCache()};\n\nexport default withData(config);\n","import React, { FC } from 'react';\nimport withData from '../helpers/withData';\nimport { gql } from '@apollo/client';\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { NextPage } from 'next';\n\nconst GET_PAPER_ITEM = gql`\n  query getPaper($id: String!) {\n    getPaper(id: $id) {\n      id\n      title\n      abstract\n    }\n  }\n`;\n\nconst Home: NextPage<{}, null> = () => {\n  const { data, loading, error } = useQuery(GET_PAPER_ITEM, { variables: { id: '2559394418' } });\n  console.log(data, loading ,error);\n\n  return (\n    <div>\n      <h1>{data && data.getPaper && data.getPaper.title}</h1>\n      <h2>{data && data.getPaper && data.getPaper.title}</h2>\n    </div>\n  );\n};\n\nHome.getInitialProps = async () => {\n  return null;\n};\n\nexport default withData(Home);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAGA;AACA;AASA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;A","sourceRoot":""}