{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar API_URL = \"https://api.scinapse.io/papers/\";\n\nvar _getPaper = function getPaper(id) {\n  return axios.get(API_URL + id);\n};\n\nvar resolvers = {\n  Query: {\n    getPaper: function () {\n      var _getPaper2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_, _ref, context, __) {\n        var id, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = _ref.id;\n                _context.next = 3;\n                return _getPaper(id);\n\n              case 3:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res.data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getPaper(_x, _x2, _x3, _x4) {\n        return _getPaper2.apply(this, arguments);\n      }\n\n      return getPaper;\n    }()\n  }\n};\nexport default resolvers;","map":{"version":3,"sources":["/Users/tyler/scinapse/graphql/resolvers.tsx"],"names":["axios","API_URL","getPaper","id","get","resolvers","Query","_","context","__","res","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,iCAAhB;;AAEA,IAAMC,SAAQ,GAAG,SAAXA,QAAW,CAACC,EAAD,EAAyB;AACxC,SAAOH,KAAK,CAACI,GAAN,CAAUH,OAAO,GAAGE,EAApB,CAAP;AACD,CAFD;;AAIA,IAAME,SAAoB,GAAG;AAC3BC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,QAAQ;AAAA;AAAA;AAAA,+BAAE,iBAAOK,CAAP,QAAkBC,OAAlB,EAA2BC,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYN,gBAAAA,EAAZ,QAAYA,EAAZ;AAAA;AAAA,uBACUD,SAAQ,CAACC,EAAD,CADlB;;AAAA;AACFO,gBAAAA,GADE;AAAA,iDAEDA,GAAG,CAACC,IAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADH;AADoB,CAA7B;AASA,eAAeN,SAAf","sourcesContent":["import axios from 'axios';\nimport { Resolvers } from '@apollo/client';\nconst API_URL = \"https://api.scinapse.io/papers/\";\n\nconst getPaper = (id: string | number) => {\n  return axios.get(API_URL + id)\n};\n\nconst resolvers: Resolvers = {\n  Query: {\n    getPaper: async (_, { id }, context, __) => {\n      const res = await getPaper(id);\n      return res.data;\n    }\n  },\n};\n\nexport default resolvers;"]},"metadata":{},"sourceType":"module"}